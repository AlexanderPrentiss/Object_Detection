import cv2  # type: ignore
import numpy as np  # type: ignore
from pypylon import pylon  # type: ignore

# ---------------- CONFIGURATION SECTION ---------------- #

ROI = (345, 859, 0, 382)  # x_min, x_max, y_min, y_max

HSV_RANGES = {
    'blue': [([90, 120, 100], [130, 255, 255])],
    'red': [([0, 150, 120], [10, 255, 255]), ([165, 150, 120], [179, 255, 255])],
    'green': [([50, 100, 100], [85, 255, 255])],
    'gold': [([15, 120, 130], [40, 255, 255])],
    'silver': [([0, 0, 90], [179, 80, 255])],
    'belt':   [([0, 0, 135], [179, 100, 255])]
}

# ---------------- CAMERA SETUP ---------------- #

def init_camera():
    camera = pylon.InstantCamera(pylon.TlFactory.GetInstance().CreateFirstDevice())
    camera.Open()
    camera.Width.SetValue(camera.Width.Max)
    camera.Height.SetValue(camera.Height.Max)
    camera.PixelFormat.SetValue("BGR8")
    camera.ExposureAuto.SetValue("Off")
    camera.ExposureTime.SetValue(8000)
    camera.GainAuto.SetValue("Continuous")
    camera.AcquisitionFrameRateEnable.SetValue(True)
    camera.AcquisitionFrameRate.SetValue(120)
    camera.BalanceWhiteAuto.SetValue("Continuous")
    camera.StartGrabbing(pylon.GrabStrategy_LatestImageOnly)
    return camera

# ---------------- COLOR CLASSIFICATION ---------------- #

def classify_color(roi_hsv):
    belt_mask = np.zeros(roi_hsv.shape[:2], dtype=np.uint8)
    for lower, upper in HSV_RANGES['belt']:
        mask = cv2.inRange(roi_hsv, np.array(lower), np.array(upper))
        belt_mask = cv2.bitwise_or(belt_mask, mask)

    non_belt_mask = cv2.bitwise_not(belt_mask)

    best_color = None
    best_count = 0

    for color, ranges in HSV_RANGES.items():
        if color == 'belt':
            continue

        mask_total = np.zeros(roi_hsv.shape[:2], dtype=np.uint8)
        for lower, upper in ranges:
            mask = cv2.inRange(roi_hsv, np.array(lower), np.array(upper))
            mask_total = cv2.bitwise_or(mask_total, mask)

        mask_total = cv2.bitwise_and(mask_total, non_belt_mask)
        count = cv2.countNonZero(mask_total)
    
        if count > best_count and count > 500:  # make sure no tiny region dominates
            best_count = count
            best_color = color

    return best_color if best_count > 1500 else None

# ---------------- MAIN LOOP ---------------- #

if __name__ == '__main__':
    camera = init_camera()
    print("Camera initialized. Starting color classification...")

    try:
        while camera.IsGrabbing():
            grabResult = camera.RetrieveResult(5000, pylon.TimeoutHandling_ThrowException)

            if grabResult.GrabSucceeded():
                img = grabResult.Array
                roi = img[ROI[2]:ROI[3], ROI[0]:ROI[1]]
                hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)

                current_detection = classify_color(hsv)
                print(f"Detected color: {current_detection}")

                # Display result
                label = current_detection if current_detection else "No color"
                cv2.putText(roi, label, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
                cv2.imshow("Color Classifier", roi)

                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

            grabResult.Release()

    except KeyboardInterrupt:
        print("Interrupted by user.")
    finally:
        camera.StopGrabbing()
        camera.Close()
        cv2.destroyAllWindows()

